// File : biorbd_python.i

// Declare the Python specific interface
%{
#define SWIG_FILE_WITH_INIT
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "Python.h"

#include "numpy/arrayobject.h"

#include "BiorbdModel.h"
#include "Utils/Matrix.h"
#include "RigidBody/GeneralizedCoordinates.h"
#include "RigidBody/GeneralizedVelocity.h"
#include "RigidBody/GeneralizedAcceleration.h"
#include "RigidBody/GeneralizedTorque.h"
#include "RigidBody/IMU.h"
%}

%include "@CMAKE_CURRENT_SOURCE_DIR@/numpy.i"
%init %{
    import_array();
%}

%include "@CMAKE_BINARY_DIR@/include/biorbdConfig.h"

// -- STRING --//
%typemap(typecheck, precedence=2300) biorbd::utils::String &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__String,  0  | 0)) && argp1) {
        // Test if it is a pointer to String already exists
        $1 = true;
    } else if( PyUnicode_Check($input) ) {
        // test if it is a string (python3 has unicode)
        $1 = true;
    } else {
        $1 = false;
    }
};
%typemap(in) biorbd::utils::String &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__String,  0  | 0)) && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::utils::String * >(argp1);
    } else if( PyUnicode_Check($input) ) {
        // Interpret the string
        $1 = new biorbd::utils::String(PyUnicode_AsUTF8($input));
    } else {
        PyErr_SetString(PyExc_ValueError, "String must be a biorbd::utils::String or string");
        SWIG_fail;
    }
};

// --- Path --- //
%typemap(typecheck, precedence=2310) biorbd::utils::Path &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__Path,  0  | 0)) && argp1) {
        // Test if it is a pointer to Path already exists
        $1 = true;
    } else if( PyUnicode_Check($input) ) {
        // test if it is a string (python3 has unicode)
        $1 = true;
    } else {
        $1 = false;
    }
};
%typemap(in) biorbd::utils::Path &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__Path,  0  | 0)) && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::utils::Path * >(argp1);
    } else if( PyUnicode_Check($input) ) {
        // Interpret the string
        $1 = new biorbd::utils::Path(PyUnicode_AsUTF8($input));
    } else {
        PyErr_SetString(PyExc_ValueError, "Path must be a Path or string");
        SWIG_fail;
    }
};

// --- biorbd::rigidbody::Joints --- //
%typemap(typecheck, precedence=2000) biorbd::rigidbody::Joints &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__Joints,  0  | 0)) && argp1) {
        // Test if it is a pointer to SWIGTYPE_p_biorbd__rigidbody__Joints already exists
        $1 = true;
    } else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::Joints &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__Joints,  0  | 0)) && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::rigidbody::Joints * >(argp1);
    } else {
        PyErr_SetString(PyExc_ValueError,
                        "biorbd::rigidbody::Joints must be "
                        "a biorbd::rigidbody::Joints");
        SWIG_fail;
    }
}

// --- Allows for calling MX as scalar --- //
%typemap(typecheck, precedence=2400) biorbd::utils::Scalar& {
    void *argp1 = 0;
#ifdef BIORBD_USE_CASADI_MATH
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        // Test if it is a pointer an MX
        casadi::MX *mx = reinterpret_cast<casadi::MX*>(argp1);
        if (mx->rows() == 1 && mx->columns() == 1){
            $1 = true;
        }
        else {
            $1 = false;
        }
    } else
#endif
    if (PyFloat_Check($input)) {
        // Test if it is a double pointer
        $1 = true;
    } else if (PyLong_Check($input)) {
        // Test if it is a double pointer
        $1 = true;
    } else {
        $1 = false;
    }
};
%typemap(in) biorbd::utils::Scalar& {
    void * argp1 = 0;
#ifdef BIORBD_USE_CASADI_MATH
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        // Recast the pointer
        try{
            $1 = new biorbd::utils::Scalar(*reinterpret_cast<casadi::MX*>(argp1));
        } catch (...){
            PyErr_SetString(PyExc_ValueError, "Scalar must be an MX(1, 1)");
            SWIG_fail;
        }
    } else
#endif
    if (PyFloat_Check($input)) {
        $1 = new biorbd::utils::Scalar(PyFloat_AS_DOUBLE($input));
    } else if (PyLong_Check($input)) {
        $1 = new biorbd::utils::Scalar(static_cast<double>(PyLong_AS_LONG($input)));
    } else {
        PyErr_SetString(PyExc_ValueError, "Scalar must be an MX(1, 1)");
        SWIG_fail;
    }
};

#ifdef BIORBD_USE_CASADI_MATH
%extend biorbd::utils::Scalar{
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
}
#endif

// --- Quaternion --- //
%extend biorbd::utils::Quaternion{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nRows(1);
        int nCols(4);
        int nArraySize(2);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = nRows;
        arraySizes[1] = nCols;

        double * quat = new double[nRows*nCols];
        unsigned int k(0);
        for (unsigned int i=0; i<nRows; ++i){
            for (unsigned int j=0; j<nCols; ++j){
                quat[k] = (*$self)(j,i);
                ++k;
            }
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, quat);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    };
#endif
}

// --- Matrix --- //
%extend biorbd::utils::Matrix{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nRows($self->rows());
        int nCols($self->cols());
        int nArraySize(2);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = nRows;
        arraySizes[1] = nCols;

        double * matrix = new double[nRows*nCols];
        unsigned int k(0);
        for (unsigned int i=0; i<nRows; ++i){
            for (unsigned int j=0; j<nCols; ++j){
                matrix[k] = (*$self)(i, j);
                ++k;
            }
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, matrix);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    };
#endif
}

#ifndef BIORBD_USE_CASADI_MATH
%typemap(typecheck, precedence=2155) Eigen::Matrix3d & {
    if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    } else {
        $1 = false;
    }
}
%typemap(in) Eigen::Matrix3d & {
    if( PyArray_Check($input) ) {
        // Get dimensions of the data::
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 2 ){
            PyErr_SetString(PyExc_ValueError, "Eigen::Matrix3d must be a 3x3 matrix");
            SWIG_fail;
        }
        if (dims[0] != 3 || dims[1] != 3){
            PyErr_SetString(PyExc_ValueError, "Eigen::Matrix3d must be a 3x3 matrix");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        $1 = new Eigen::Matrix3d();
        for (unsigned int i=0; i<3; ++i){
            for (unsigned int j=0; j<3; ++j){
                (*$1)(i, j) = *(double*)PyArray_GETPTR2((PyArrayObject*)data, i, j);
            }
        }
    } else {
        PyErr_SetString(PyExc_ValueError,
                        "Eigen::Matrix3d must be a 3x3 matrix "
                        "when using a numpy array");
        SWIG_fail;
    }
};
%typemap(typecheck, precedence=2155) Eigen::Matrix4d & {
    if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    } else {
        $1 = false;
    }
}
%typemap(in) Eigen::Matrix4d & {
    if( PyArray_Check($input) ) {
        // Get dimensions of the data::
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 2 ){
            PyErr_SetString(PyExc_ValueError, "Eigen::Matrix4d must be a 4x4 matrix");
            SWIG_fail;
        }
        if (dims[0] != 4 || dims[1] != 4){
            PyErr_SetString(PyExc_ValueError, "Eigen::Matrix4d must be a 4x4 matrix");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        $1 = new Eigen::Matrix4d();
        for (unsigned int i=0; i<4; ++i){
            for (unsigned int j=0; j<4; ++j){
                (*$1)(i, j) = *(double*)PyArray_GETPTR2((PyArrayObject*)data, i, j);
            }
        }
    } else {
        PyErr_SetString(PyExc_ValueError,
                        "Eigen::Matrix4d must be a 4x4 matrix "
                        "when using a numpy array");
        SWIG_fail;
    }
};
#endif

// --- Vector --- //
%extend biorbd::utils::Vector{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nElements($self->size());
        int nArraySize(1);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = nElements;

        double * vect = new double[nElements];
        for (unsigned int i=0; i<nElements; ++i){
            vect[i] = (*$self)(i);
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, vect);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    };
#endif
}
%typemap(typecheck, precedence=2150) biorbd::utils::Vector & {
    void *argp1 = 0;
#ifdef BIORBD_USE_CASADI_MATH
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
#else
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__Vector,  0  | 0)) && argp1) {
#endif
    // Test if it is a pointer an MX or Vector
        $1 = true;
    }
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::utils::Vector & {
    void * argp1 = 0;
#ifdef BIORBD_USE_CASADI_MATH
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::utils::Vector(*reinterpret_cast<casadi::MX*>(argp1));
#else
    if (SWIG_IsOK(
                SWIG_ConvertPtr($input, &argp1,
                                SWIGTYPE_p_biorbd__utils__Vector,  0  | 0))
            && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::utils::Vector * >(argp1);
#endif
    } else if( PyArray_Check($input) ) {
        // Get dimensions of the data::
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError, "Vector must be a numpy vector");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int n(dims[0]);
        $1 = new biorbd::utils::Vector(n);
        for (unsigned int i=0; i<n; ++i)
            (*$1)[i] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, i);

    } else {
        PyErr_SetString(PyExc_ValueError,
                        "Vector must be a one dimension "
                        "vector when using a numpy array");
        SWIG_fail;
    }
};

// --- GeneralizedCoordinates --- //
%typemap(typecheck, precedence=2100)
biorbd::rigidbody::GeneralizedCoordinates & {
    void *argp1 = 0;
    if(SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedCoordinates,  0  | 0)) && argp1){
            $1 = true;
        }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        // Test if it is a pointer to
        // SWIGTYPE_p_biorbd__rigidbody__GeneralizedCoordinates already exists
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedCoordinates & {
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1,SWIGTYPE_p_biorbd__rigidbody__GeneralizedCoordinates, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedCoordinates * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedCoordinates(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedCoordinates must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQ(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedCoordinates(nQ);
        for (unsigned int q=0; q<nQ; ++q){
            (*$1)[q] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, q);
        }
    }
};
%typemap(typecheck, precedence=2101) biorbd::rigidbody::GeneralizedCoordinates * {
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1,SWIGTYPE_p_biorbd__rigidbody__GeneralizedCoordinates, 0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
            $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else if ($input == Py_None){
        $1 = true;
    }
    else{
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedCoordinates * {
    void * argp1 = 0;

    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1,SWIGTYPE_p_biorbd__rigidbody__GeneralizedCoordinates, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedCoordinates * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedCoordinates(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedCoordinates must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQ(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedCoordinates(nQ);
        for (unsigned int q=0; q<nQ; ++q){
            (*$1)[q] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, q);
        }
    }
    else if ($input == Py_None) {
        $1 = nullptr;
    }
};

// --- GeneralizedVelocity --- //
%typemap(typecheck, precedence=2102)
biorbd::rigidbody::GeneralizedVelocity & {
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedVelocity, 0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if(SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedVelocity,  0  | 0)) && argp1){
        $1 = true;
    }
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedVelocity & {
    void * argp1 = 0;

    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedVelocity, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedVelocity * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedVelocity(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedVelocity must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQdot(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedVelocity(nQdot);
        for (unsigned int qdot=0; qdot<nQdot; ++qdot){
            (*$1)[qdot] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, qdot);
        }
    }
};
// --- GeneralizedVelocity --- //
%typemap(typecheck, precedence=2103)
biorbd::rigidbody::GeneralizedVelocity * {
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1,SWIGTYPE_p_biorbd__rigidbody__GeneralizedVelocity, 0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else if ($input == Py_None){
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedVelocity * {
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedVelocity, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedVelocity * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedVelocity(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedVelocity must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQdot(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedVelocity(nQdot);
        for (unsigned int qdot=0; qdot<nQdot; ++qdot){
            (*$1)[qdot] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, qdot);
        }
    }
    else if ($input == Py_None){
        $1 = nullptr;
    }
};

// --- GeneralizedAcceleration --- //
%typemap(typecheck, precedence=2106)
biorbd::rigidbody::GeneralizedAcceleration & {
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedAcceleration, 0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedAcceleration & {
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedAcceleration, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedAcceleration * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedAcceleration(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedAcceleration must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQddot(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedAcceleration(nQddot);
        for (unsigned int qddot=0; qddot<nQddot; ++qddot){
            (*$1)[qddot] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, qddot);
        }
    }
};
// --- GeneralizedAcceleration --- //
%typemap(typecheck, precedence=2105)
biorbd::rigidbody::GeneralizedAcceleration * {
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedAcceleration, 0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else if ($input == Py_None){
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedAcceleration * {
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1,SWIGTYPE_p_biorbd__rigidbody__GeneralizedAcceleration, 0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedAcceleration * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedAcceleration(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedAcceleration must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);
        // Copy the actual data
        unsigned int nQddot(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedAcceleration(nQddot);
        for (unsigned int qddot=0; qddot<nQddot; ++qddot){
            (*$1)[qddot] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, qddot);
        }
    }
    else if ($input == Py_None){
        $1 = nullptr;
    }
};

// --- GeneralizedTorque --- //
%typemap(typecheck, precedence=2110) biorbd::rigidbody::GeneralizedTorque &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedTorque,  0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::GeneralizedTorque &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__GeneralizedTorque,  0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::rigidbody::GeneralizedTorque * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::rigidbody::GeneralizedTorque(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls (has to be a vector)
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "GeneralizedTorque must be a one dimension "
                            "vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);

        // Copy the actual data
        unsigned int nGeneralizedTorque(dims[0]);
        $1 = new biorbd::rigidbody::GeneralizedTorque(nGeneralizedTorque);
        for (unsigned int GeneralizedTorque=0; GeneralizedTorque<nGeneralizedTorque; ++GeneralizedTorque)
            (*$1)[GeneralizedTorque] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, GeneralizedTorque);

    }
    else {
        PyErr_SetString(PyExc_ValueError,
                        "GeneralizedTorque must be a "
                        "GeneralizedTorque or numpy vector");
        SWIG_fail;
    }
};

#ifndef BIORBD_USE_CASADI_MATH
// --- biorbd::rigidbody::Markers --- //
%typemap(typecheck, precedence=2200) biorbd::rigidbody::Markers &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__Markers,  0  | 0)) && argp1) {
        // Test if it is a pointer to SWIGTYPE_p_biorbd__rigidbody__Markers already exists
        $1 = true;
    } else {
        $1 = false;
    }
}
%typemap(in) biorbd::rigidbody::Markers &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__rigidbody__Markers,  0  | 0)) && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::rigidbody::Markers * >(argp1);
    } else {
        PyErr_SetString(PyExc_ValueError,
                        "biorbd::rigidbody::Markers must be "
                        "a biorbd::rigidbody::Markers");
        SWIG_fail;
    }
}
#endif

// --- Node --- //
#ifndef BIORBD_USE_CASADI_MATH
%typemap(typecheck, precedence=2130) biorbd::utils::Vector3d &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__Node,  0  | 0)) && argp1) {
        // Test if it is a pointer to SWIGTYPE_p_biorbd__utils__Node already exists
        $1 = true;
    } else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    } else {
        $1 = false;
    }
}
%typemap(in) biorbd::utils::Vector3d &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__Node,  0  | 0)) && argp1) {
        // Recast the pointer
        $1 = reinterpret_cast< biorbd::utils::Vector3d * >(argp1);
    } else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls
        if (ndim != 1 && (dims[0] < 3 || dims[0] > 4)){
            PyErr_SetString(PyExc_ValueError, "Node must be a numpy 3d vector");
            SWIG_fail;
        }
        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);

        // Copy the actual data
        $1 = new biorbd::utils::Vector3d(0, 0, 0);
        for (unsigned int i=0; i<3; ++i)
            (*$1)[i] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, i);

    } else {
        PyErr_SetString(PyExc_ValueError, "Node must be a Node or numpy vector");
        SWIG_fail;
    }
};
#endif
%extend biorbd::utils::Vector3d{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nArraySize(1);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = 3;

        double * node = new double[3];
        for (unsigned int i=0; i<3; ++i){
            node[i] = (*$self)(i);
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, node);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    }
#endif
};

// --- Spatial Vector --- //
%extend biorbd::utils::SpatialVector{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nArraySize(1);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = 6;

        double * node = new double[6];
        for (unsigned int i=0; i<6; ++i){
            node[i] = (*$self)(i);
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, node);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    }
#endif
};
%typemap(typecheck, precedence=2010) biorbd::utils::SpatialVector &{
    void *argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__SpatialVector,  0  | 0)) && argp1) {
        $1 = true;
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = true;
    }
#endif
    else if( PyArray_Check($input) ) {
        // test if it is a numpy array
        $1 = true;
    }
    else {
        $1 = false;
    }
}
%typemap(in) biorbd::utils::SpatialVector &{
    void * argp1 = 0;
    if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_biorbd__utils__SpatialVector,  0  | 0)) && argp1) {
        $1 = reinterpret_cast< biorbd::utils::SpatialVector * >(argp1);
    }
#ifdef BIORBD_USE_CASADI_MATH
    else if (SWIG_IsOK(SWIG_ConvertPtr($input, &argp1, SWIGTYPE_p_casadi__MX,  0  | 0)) && argp1) {
        $1 = new biorbd::utils::SpatialVector(*reinterpret_cast<casadi::MX*>(argp1));
    }
#endif
    else if( PyArray_Check($input) ) {
        // Get dimensions of the data
        int        ndim     = PyArray_NDIM    ((PyArrayObject*)$input);
        npy_intp*  dims     = PyArray_DIMS    ((PyArrayObject*)$input);

        // Dimension controls (has to be a vector)
        if (ndim != 1 ){
            PyErr_SetString(PyExc_ValueError,
                            "SpatialVector must be a (6,) vector when using a numpy array");
            SWIG_fail;
        }

        // Cast the vector
        PyObject *data = PyArray_FROM_OTF((PyObject*)$input, NPY_DOUBLE, NPY_ARRAY_IN_ARRAY);

        // Copy the actual data
        unsigned int nSpatialVector(dims[0]);
        if (nSpatialVector != 6 ){
            PyErr_SetString(PyExc_ValueError,
                            "SpatialVector must be a (6,) vector when using a numpy array");
            SWIG_fail;
        }
        $1 = new biorbd::utils::SpatialVector();
        for (unsigned int sv=0; sv<nSpatialVector; ++sv)
            (*$1)[sv] = *(double*)PyArray_GETPTR1((PyArrayObject*)data, sv);

    }
    else {
        PyErr_SetString(PyExc_ValueError,
                        "SpatialVector must be a SpatialVector or numpy vector");
        SWIG_fail;
    }
};

%extend biorbd::utils::RotoTrans{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nArraySize(2);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = 4;
        arraySizes[1] = 4;

        double * values = new double[4*4];
        for (unsigned int i=0; i<4; ++i){
            for (unsigned int j=0; j<4; ++j){
                values[i*4+j] = (*$self)(j*4+i);
            }
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, values);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    }
#endif
};
%extend biorbd::rigidbody::IMU{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nArraySize(2);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = 4;
        arraySizes[1] = 4;

        double * values = new double[4*4];
        for (unsigned int i=0; i<4; ++i){
            for (unsigned int j=0; j<4; ++j){
                values[i*4+j] = (*$self)(j*4+i);
            }
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, values);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    }
#endif
};

%extend biorbd::utils::Rotation{
#ifdef BIORBD_USE_CASADI_MATH
    casadi::MX to_mx(){
        return *dynamic_cast<casadi::MX*>($self);
    };
#else
    PyObject* to_array(){
        int nArraySize(2);
        npy_intp * arraySizes = new npy_intp[nArraySize];
        arraySizes[0] = 3;
        arraySizes[1] = 3;

        double * values = new double[3*3];
        for (unsigned int i=0; i<3; ++i){
            for (unsigned int j=0; j<3; ++j){
                values[i*3+j] = (*$self)(j*3+i);
            }
        }
        PyObject* output = PyArray_SimpleNewFromData(nArraySize,arraySizes,NPY_DOUBLE, values);
        PyArray_ENABLEFLAGS((PyArrayObject *)output, NPY_ARRAY_OWNDATA);
        return output;
    }
#endif
};

// Import the main swig interface
%include @CMAKE_CURRENT_BINARY_DIR@/../biorbd.i
